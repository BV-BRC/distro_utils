#!/usr/bin/env perl

use strict;
use Cwd 'abs_path';
use Template;
use Getopt::Long::Descriptive;
use DistroUtils;

#
# For now we assume this is run from the distribution directory.
# 
# Read the manifest file and create a dev_container in the given destination. 
# Create a deploy.cfg there based on the given target, the runtime configured here,
# and the localization.cfg.
#

my($opt, $usage) = describe_options("%c %o dest-dir [deploy-dir]\n",
				    ['include-path|I=s@', "Look here for configuration file templates", { default => [] }],
				    ["setenv-file=s", "File to copy into deployment setenv.sh"],
				    ["runtime=s", "Runtime to bake into the deployment", { default => $ENV{KB_RUNTIME} }],
				    ['override=s@', 'Override template configuration values', { default => [] }],
				    ["help|h", "Print this usage message"]);

print($usage->text), exit if $opt->help;
print($usage->text), exit 1 if (@ARGV == 0 || @ARGV > 2);

#
# We need to make the include path absolute because we chdir.
#
my $include_path = [ map { abs_path($_) } @{$opt->include_path} ];

my $setenv_file;
if ($opt->setenv_file)
{
    $setenv_file = $opt->setenv_file;
}
elsif (-f "setenv.sh")
{
    $setenv_file = abs_path("setenv.sh");
    print STDERR "Using local setenv.sh file for environment setup in deployment\n";
}

my $git_base = "https://github.com";

my $dest = shift;

-d $dest || mkdir($dest) || die "cannot mkdir $dest: $!";

$dest = abs_path($dest);
my $here = abs_path('.');

my $deploy_dir = shift;
$deploy_dir //= "$dest/deployment";

if ($deploy_dir !~ m,^/,)
{
    $deploy_dir = abs_path($deploy_dir);
}
print "Deploy to $deploy_dir\n";

#
# If this repo has a tag, use that as the version. Otherwise set 
# a datestamp based on the date of the latest commit.
#

my $str = `git log -n 1 --pretty='tformat:%H %ai'`;
my($hash, $date, $time, $tz) = split(/\s+/, $str);
$time =~ s/:/-/g;
my $tag = `git describe --tags`;
chomp $tag;
print "Hash: $hash\n";
print "Date: $date $time\n";
print "Tag: $tag\n";
my $version = $tag || "$date-$time";

open(V, ">", "$dest/VERSION");
print V "$version\n";
close(V);

open(V, ">", "$deploy_dir/VERSION");
print V "$version\n";
close(V);

open(M, "<", "Manifest") or die "cannot open Manifest: $!";

my %hash;
my %repo;
while (<M>)
{
    chomp;
    my($mod, $hash, $repo) = split(/\t/);
    $hash{$mod} = $hash;
    $repo{$mod} = $repo;
}

close(M);

chdir($dest) or die "Cannot chdir $dest: $!";

my $h = $hash{dev_container};
$h or die "No hash defined for dev_container\n";

checkout("dev_container", $h, $repo{dev_container});
chdir("dev_container/modules") or die "Cannot chdir dev_container/modules: $!";

while (my($mod, $hash) = each %hash)
{
    next if $mod eq 'dev_container';
    checkout($mod, $hash, $repo{$mod});
}

#
# Read configs and create deploy.cfg using template toolkit.
#

my %vars = (
    target => $deploy_dir,
    runtime => $opt->runtime,
	   );

for my $override (@{$opt->override})
{
    my($var, $val) = split(/=/, $override, 2);
    if ($val)
    {
	$vars{$var} = $val;
    }
}
    
if (open(F, "<", "$here/localize.cfg"))
{
    while (<F>)
    {
	chomp;
	my($key, $value) = /^(\S+)\s+(.*)$/;
	$vars{$key} = $value;
    }
    close(F);
}
else
{
    warn "Note: cannot open localize.cfg: $!";
}

DistroUtils::expand_template("$here/distro.cfg", $include_path, \%vars, "$dest/dev_container/deploy.cfg");

if ($setenv_file)
{
    my $rc = system("cp", $setenv_file, "$dest/dev_container/setenv.sh");
    $rc == 0 or warn "Warning: error copying setenv file $setenv_file to $dest/dev_container/setenv.sh\n";
}

sub checkout
{
    my($mod, $hash, $repo) = @_;

    my $rc = system("git", "clone", "$git_base/$repo", $mod);
    #my $rc = system("git", "clone", "--depth", "1", "$git_base/$repo", $mod);
    $rc == 0 or die "Clone $mod failed with rc=$rc\n";

    $rc = system("cd $mod; git checkout $hash");
    $rc == 0 or die "Checkout $hash of $mod failed with rc=$rc\n";
}

