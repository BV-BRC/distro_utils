#!/usr/bin/env perl

use FindBin;

use lib "$FindBin::Bin";

use strict;
use Config::Simple;
use File::Temp;
use Data::Dumper;
use IPC::Run 'run';
use GithubRepo;
use Getopt::Long::Descriptive;
use DistroUtils;

my($opt, $usage) = describe_options("%c %o", 
				    ['include-path|I=s@', "Look here for configuration file templates", { default => [] }],
				    ["no-recurse" => "do not perform recursive dependency lookup"],
				    ["help|h" => "show this help message"],
				   );
print($usage->text), exit(0) if $opt->help;
die($usage->text) if @ARGV != 0;

#
# Create a distribution manifest for the release in the current directory.
#
# Read the distro.cfg file here and parse out the deploy-client, deploy-service,
# and deploy-master lines.
#

my %repo;

my $config_file = "distro.cfg";
-f $config_file or die "Config file $config_file not found\n";

my $cfg = DistroUtils::expand_and_import($config_file, $opt->include_path, {});

my $m_client = $cfg->{'default.deploy-client'};
my $m_service = $cfg->{'default.deploy-service'};
my $m_master = $cfg->{'default.deploy-master'};

my %mods = map { $_ => 1 } grep { $_ } @$m_client, @$m_service, @$m_master;
my @mods = sort keys %mods;

push(@mods, "dev_container");

my %repos;
my %hash;
my %info;

my @mods_to_checkout = @mods;

my $token =  $ENV{GITHUB_TOKEN};

while (@mods_to_checkout)
{
    my $mod = shift(@mods_to_checkout);

    my $repo_str = "kbase/$mod";
    if ($cfg->{"$mod.source-repo"})
    {
	$repo_str = $cfg->{"$mod.source-repo"};
    }
    
    my $repo = GithubRepo->new($repo_str, $token);
    $repos{$mod} = $repo;
    print STDERR "Process $mod\n";

    my $info = $repo->get_info();
    my $hash = $cfg->{"$mod.source-commit-hash"};
    
    if (!$hash)
    {
	$hash = $repo->get_master_hash();
    }
    $hash{$mod} = $hash;
    $info{$mod} = $info;


    if (!$opt->no_recurse)
    {
	my @deps = $repo->get_dependencies($hash);

	print STDERR "$mod => @deps\n" if @deps;

	for my $dep (@deps)
	{
	    if (!$hash{$dep} && !grep { $_ eq $dep } @mods_to_checkout)
	    {
		push(@mods_to_checkout, $dep);
		push(@mods, $dep);
	    }
	}
    }
}

open(M, ">", "Manifest") or die "Cannot write Manifest: $!";
for my $mod (@mods)
{
    print M "$mod\t$hash{$mod}\t$repos{$mod}->{repo}\n";
}
close(M);

open(M, ">", "Contents") or die "Cannot write Contents: $!";
for my $mod (@mods)
{
    print M "$mod\n";
    my $info = $info{$mod};
    my $in = $info->{description};
    my $out;
    run ['fmt'], '<', \$in, '>', \$out;
    print M "$out\n";
    print M "\n";

}
